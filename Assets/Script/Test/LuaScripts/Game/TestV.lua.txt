local TestVM = require("Game.TestVM")

local WindowBase = require("LuaFramework.Views.WindowBase")

local TestV = class("TestV", WindowBase)

TestV.PrefabPath = "TestV"

function TestV:ctor(bundle)
    WindowBase.ctor(self, bundle)

    self.viewModel = TestVM.new()
    self.bindingExt = BindingExtension.new(self)
    self.bindingSet = self.bindingExt:CreateBindingSetWithContext(self.testVM)
    -- local builder = set:Bind()
    -- builder:For("TestFunc"):To("TestRequest")

    -- local builder = set:BindByTarget(text)
    -- builder:For("text"):To("Test"):OneWay()
    
    -- local builder = set:BindByTarget(text)
    -- builder:For("color"):To("TestColor"):OneWay()

    -- local builder = set:BindByTarget(text.transform)
    -- builder:For("localScale"):To("TestLocalScale"):OneWay()

    -- local builder = set:BindByTarget(text.gameObject)
    -- builder:For("activeSelf"):To("TestActive"):TwoWay()

    -- local builder = set:BindByTarget(button)
    -- builder:For("onClick"):To("OnClick"):OneWay()

    -- local builder = set:BindByTarget(button)
    -- builder:For("onClick"):To("TestCommand"):OneWay()

    -- local builder = set:BindByTarget(inputField)
    -- builder:For("text", "onValueChanged"):To("Test"):TwoWay()

    -- set:Build()

    -- testVM.Test = "123"

    -- testVM.TestRequest:Raise()
end

function TestV:TestFunc(sender, args)
    print("hahaha")
end

function TestV:OnCreate()
    WindowBase.OnCreate(self)
    print("child OnCreate")

    local text = self.Transform:Find("Text"):GetComponent(typeof(CSharpType.Text))

    local builder = self.bindingSet:BindByTarget(text)
    builder:For(text.Text):To("Test"):OneWay()
    
    --
    self.bindingSet:Build()
end

function TestV:OnShow()
    WindowBase.OnShow(self)
    print("child OnShow")

    self.testVM.Test = "123"

    -- local transOne = self.transform:Find("GameObjectOne")
    -- local transTwo = self.transform:Find("GameObjectTwo")
    -- self:CreateSubView("Game.TestSubV", {parent = transOne})
    -- self:CreateSubView("Game.TestSubV", {parent = transTwo})
end

return TestV