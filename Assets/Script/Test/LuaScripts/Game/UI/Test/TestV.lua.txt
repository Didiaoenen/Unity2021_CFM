local TestVM = require("Game.UI.Test.TestVM")
local WindowBase = require("LuaFramework.Views.WindowBase")
local BindingMode = require("LuaFramework.Binding.BindingMode")
local BindingExtension = require("LuaFramework.Binding.BindingExtension")

local TextExt = require("LuaFramework.Views.Components.TextExt")
local ButtonExt = require("LuaFramework.Views.Components.ButtonExt")
local InputFieldExt = require("LuaFramework.Views.Components.InputFieldExt")

local TestV = class("TestV", WindowBase)

TestV.PrefabPath = "TestV"

function TestV:ctor(bundle)
   WindowBase.ctor(self, bundle)

   self.viewModel = TestVM.new()
   self.bindingExt = BindingExtension.new(self)
   self.bindingSet = self.bindingExt:CreateBindingSetWithContext(self.viewModel)





























end

function TestV:TestFunc(sender, args)
   assert({ sender, args }, "")
   print("hahaha")
end

function TestV:OnCreate()
   WindowBase.OnCreate(self)
   print("child OnCreate")















   self.viewModel.text:BindWithName(self, TextExt, "text", BindingMode.OneWay)
   self.viewModel.button:BindWithName(self, ButtonExt, "button", BindingMode.OneWay)
   self.viewModel.inputField:BindWithName(self, InputFieldExt, "inputField", BindingMode.OneWay)


   self.bindingSet:Build()
end

function TestV:OnShow()
   WindowBase.OnShow(self)

   self.viewModel.text.Text = "hahaha"





end

function TestV:dtor()
end

return TestV
