-- Copyright (c) 2021 榆柳松
-- https://github.com/wzhengsen/LuaOOP

-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:

-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.

-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.

local Config = require("OOP.Config");
local IsInherite = Config.ExternalClass.IsInherite;
local Internal = require("OOP.Variant.Internal");

local BaseFunctions = {
    bits = Config.LuaVersion < 5.3 and require("OOP.Version.LowerThan53") or require("OOP.Version.HigherThan52")
}

---Maps some value changes to subclasses.
---@param cls table
---@param keyTable table
---@param value any
function BaseFunctions.Update2Children(cls,keyTable,value)
    local children = Internal.ClassesChildren[cls];
    for _,child in ipairs(children) do
        if nil == keyTable[child] then
            keyTable[child] = value;
        end
        BaseFunctions.Update2Children(child,keyTable,value);
    end
end

function BaseFunctions.Update2ChildrenWithKey(cls,keyTable,key,value,force)
    local children = Internal.ClassesChildren[cls];
    for _,child in ipairs(children) do
        local t = keyTable[child];
        if t and force or nil == t[key] then
            t[key] = value;
        end
        BaseFunctions.Update2ChildrenWithKey(child,keyTable,key,value);
    end
end

function BaseFunctions.Update2ChildrenClassMeta(cls,key,value)
    local children = Internal.ClassesChildren[cls];
    for _,child in ipairs(children) do
        local cmt = getmetatable(child);
        if cmt and nil == cmt[key]  then
            cmt[key] = value;
        end
        BaseFunctions.Update2ChildrenClassMeta(child,key,value);
    end
end

---Copy any value.
---@param any any
---@return any
function BaseFunctions.Copy(any)
    local _Copy
    _Copy = function(any,existTab)
        if type(any) ~= "table" then
            return any;
        end
        local ret = existTab[any];
        if nil ~= ret then
            return ret;
        end
    
        local tempTab = {};
        existTab[any] = tempTab;
        for k,v in pairs(any) do
            tempTab[_Copy(k,existTab)] = _Copy(v,existTab);
        end
        return tempTab;
    end
    return _Copy(any,{});
end

function BaseFunctions.ClassBasesIsRecursive(baseCls, bases)
    for _, base in ipairs(bases) do
        if rawequal(base, baseCls) then
            return true;
        else
            local bBases = Internal.ClassesBases[base];
            if bBases and BaseFunctions.ClassBasesIsRecursive(baseCls, bBases) then
                return true;
            elseif IsInherite and IsInherite(base, baseCls) then
                return true;
            end
        end
    end
    return false;
end

return BaseFunctions;