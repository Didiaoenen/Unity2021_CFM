function clone(object)
    local lookup_table = {}
    local function _copy(object)
        if type(object) ~= "table" then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end
        local newObject = {}
        lookup_table[object] = newObject
        for key, value in pairs(object) do
            newObject[_copy(key)] = _copy(value)
        end
        return setmetatable(newObject, getmetatable(object))
    end
    return _copy(object)
end

function class(classname, super)
    super = super or {}

    local cls = {}
    cls.__classname = classname
    cls.__getter = {}
	cls.__setter = {}
    cls.super = super

    local __meta = {__index = super, __call = function (t, ...)
        
        local instance = clone(t)
        instance.super = clone(instance.super)
        local __meta = clone(getmetatable(t))
        __meta.__index = instance.super
        setmetatable(t, __meta)

        local __cls = clone(cls)
        __cls.super = instance.super
        local __meta = clone(getmetatable(__cls))
        __meta.__index = instance.super
        setmetatable(__cls, __meta)

        local meta = {
            __index = function(t, k)

                local insuper
                insuper = function (cur)
                    local curSuper = cur.super
                    if curSuper then
                        if curSuper[k] ~= nil then
                            return curSuper[k]
                        else
                            return insuper(curSuper)
                        end
                    else
                        return
                    end
                end

                local getinsuper
                getinsuper = function (cur)
                    local curSuper = cur.super
                    if curSuper and curSuper.__getter then
                        if curSuper.__getter[k] ~= nil then
                            return curSuper.__getter[k](t, k)
                        else
                            return getinsuper(curSuper)
                        end
                    else
                        return
                    end
                end
                
                if __cls[k] ~= nil then
                    return __cls[k]
                else
                    local superValue = insuper(__cls)
                    if superValue then
                        return superValue
                    end
                end

                if t.__getter[k] ~= nil then
                    return t.__getter[k](t, k)
                else
                    return getinsuper(t)
                end
            end,
            __newindex = function(t, k, v)
                
                local setsuper
                setsuper = function (cur)
                    local curSuper = cur.super
                    if curSuper and curSuper.__setter then
                        if curSuper.__setter[k] ~= nil then
                            curSuper.__setter[k](t, k, v)
                            return true
                        else
                            return setsuper(curSuper)
                        end
                    else
                        return false
                    end
                end

                if t.__setter[k] ~= nil then
                    t.__setter[k](t, k, v)
                    return
                else
                    if setsuper(t) then
                        return
                    end
                end

                rawset(t, k, v)
            end
        }
        setmetatable(instance, meta)
        instance:ctor(...)
        return instance
    end}

    setmetatable(cls, __meta)
    return cls
end

function try(block)
	local main = block[1]
	local catch = block.catch
	local finally = block.finally
	
	local mstatus, mresult = pcall(main)

	local catched, cresult, fresult
	
	if not status and catch and type(catch) == "function" then
		catched = true
		cresult = catch(mresult)
	end
	
	if finally and type(finally) == "function" then
		fresult = finally()
	end
	
	if mstatus then
        if not fresult then
            if not cresult then
                return mresult
            else
                return cresult
            end
        else
            return fresult
        end
	else
        if not catched then
            error(mstatus)
        end
	end
end

function bindevent(ui, callback, ...)
    if not ui or not callback then
        return
    end
    local args = {...}
    return function (eventData)
        callback(ui, eventData, table.unpack(args))
    end
end

function split(str, sep)
	sep = sep or ""
	local items = {}
    local pattern = string.format("([^%s]+)", sep)
    string.gsub(str, pattern, function (c) table.insert(items, c) end)  
    return items
end

function table.foreach(t, callback)
    for i, v in ipairs(t) do
        if callback then
            callback(i, v)
        end
    end
end

function table.findlastindex(t, callback)
    local t = {}
    for i, v in ipairs(t) do
        if callback and callback(i, v) then
            table.insert(t, i)
        end
    end
    return t[#(t)]
end

function table.findindex(t, callback)
    local t = {}
    for i, v in ipairs(t) do
        if callback and callback(i, v) then
            table.insert(t, i)
            break
        end
    end
    return t[1]
end

function table.find(t, callback)
    for i, v in ipairs(t) do
        if callback and callback(i, v) then
            return v
        end
    end
end

function table.removeobj(t, obj)
    for i, v in ipairs(t) do
        if v == obj then
            return table.remove(t, i)
        end
    end
end

function table.exists(t, callback)
    for i, v in ipairs(t) do
        if callback and callback(i, v) then
            return true
        end
    end
    return false
end

function table.containskey(t, key)
    for k, v in pairs(t) do
        if k == key then
            return true
        end
    end
    return false
end

function table.containsvalue(t, value)
    for k, v in pairs(t) do
        if v == value then
            return true
        end
    end
    return false
end