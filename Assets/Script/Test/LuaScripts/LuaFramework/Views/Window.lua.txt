local WindowView = require("LuaFramework.Views.WindowView")

local Window = class("Window", WindowView)

Window.__getter.SubView = function (this, k)
    return this.subView
end

function Window:ctor(bundle)
    self.super:ctor(bundle)

    self.subView = {}
    self.viewStack = {}
end

function Window:OnEnable()
    self.super:OnEnable()
end

function Window:OnDisable()
    self.super:OnDisable()
end

function Window:OnShow()
    for i, v in ipairs(self.subView) do
        if v.WindowState == WindowState.VISIBLE then
            v:OnShow()
        end
    end
end

function Window:OnHide()
    for i, v in ipairs(self.subView) do
        if v.WindowState == WindowState.INVISIBLE then
            v:OnHide()
        end
    end
end

function Window:CreateSubView(name, bundle)
    assert(name, "")

    return self.WindowManager.Create(name, bundle)
end

function Window:AddSubView(view)
    table.insert(self.subView, view)
end

function Window:PushOpenView(view)
    -- need check
    table.insert(self.viewStack, view)
end

function Window:PopOpenView()
    return table.remove(self.viewStack, #(self.viewStack))
end

function Window:GetViewStackTop()
    return self.viewStack[#(self.viewStack)]
end

return Window