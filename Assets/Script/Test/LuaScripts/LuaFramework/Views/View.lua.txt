local View = class("View")

View.prefabPath = ""

View.__getter.EnterAnimation = function (this, k)
    return this.enterAnimation
end

View.__setter.EnterAnimation = function (this, k, v)
    this.enterAnimation = v
end

View.__getter.ExitAnimation = function (this, k)
    return this.exitAnimation
end

View.__setter.ExitAnimation = function (this, k ,v)
    this.exitAnimation = v
end

View.__getter.Name = function (this, k)
    return this.gameObject and this.gameObject.name
end

View.__setter.Name = function (this, k, v)
    if this.gameObject then
        this.gameObject.name = v
    end
end

View.__getter.Parent = function (this, k)
    return this.parent
end

View.__setter.Parent = function (this, k, v)
    this.parent = v
end

View.__getter.Owner = function (this, k)
    return this.gameObject
end

View.__setter.Owner = function (this, k, v)
    this.gameObject = v
end

View.__getter.Transform = function (this, k)
    return this.transform
end

View.__setter.Transform = function (this, k, v)
    this.transform = v
end

View.__getter.Canvas = function (this, k)
    return this.canvas
end

View.__setter.Canvas = function (this, k, v)
    this.canvas = v
end

View.__getter.CanvasGroup = function (this, k)
    return this.canvasGroup
end

View.__setter.CanvasGroup = function (this, k, v)
    this.canvasGroup = v
end

View.__getter.Visibility = function (this, k)
    return this.gameObject and this.gameObject.activeSelf
end

View.__setter.Visibility = function (this, k, v)
    if this.gameObject and v ~= this.gameObject.activeSelf then
        this.gameObject:SetActive(v)
    end
end

View.__getter.Interactable = function (this, k)
    -- if this.gameObject then
    --     return this.CanvasGroup.interactable
    -- end
end

View.__setter.Interactable = function (this, k, v)
    -- if this.gameObject then
    --     this.CanvasGroup.interactable = v
    -- end
end

View.__getter.GraphicRaycaster = function (this, k)
    return this.graphicRaycaster
end

View.__setter.GraphicRaycaster = function (this, k, v)
    this.graphicRaycaster = v
end

function View:ctor(bundle)
    self.enterAnimation = nil
    self.exitAnimation = nil
    self.rectTransform = nil
    self.canvasGroup = nil
    self.gameObject = nil
    self.transform = nil
    self.canvas = nil
    self.graphicRaycaster = nil

    self.components = {}

    --
    self.parent = table.containskey(bundle, "parent") and bundle.parent
end

function View:OnEnable()
    self:OnVisibilityChanged()
end

function View:OnDisable()
    self:OnVisibilityChanged()
end

function View:OnVisibilityChanged()
    
end

function View:SetParent(parent)
    assert(parent, "")
    self.parent = parent
    self.transform:SetParent(parent)
end

function View:GetComponent(name)
    local component = Canvas(self.variables[name])
    table.insert(self.components, component)
    return component
end

function View:AddComponent(component)
    assert(self.gameObject, "")
    return component(self.gameObject:AddComponent(component.CSharpType))
end

function View:Destroy()
    for i, v in ipairs(self.components) do
        v:Destroy()
    end
    self.components = nil
end

return View