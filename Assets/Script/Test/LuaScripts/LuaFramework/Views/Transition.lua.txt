local CoroutineExt = require("LuaFramework.Common.CoroutineExt")
local ExecutorsExt = require("LuaFramework.Execution.ExecutorsExt")
local TransitionAwaiter = require("LuaFramework.Views.TransitionAwaiter")

local Transition = class("Transition")

function Transition.get:Window()
   return self.window
end

function Transition.set:Window(value)
   self.window = value
end

function Transition.get:IsDone()
   return self.done
end

function Transition.set:IsDone(value)
   self.done = value
end

function Transition.get:AnimationDisabled()
   return self.animationDisabled
end

function Transition.set:AnimationDisabled(value)
   self.animationDisabled = value
end

function Transition.get:OverlayPolicy()
   return self.overlayPolicy
end

function Transition.set:OverlayPolicy(value)
   self.overlayPolicy = value
end

function Transition:ctor(window)
   self.window = window
   self.done = false
   self.animationDisabled = false
   self.overlayPolicy = nil
   self.running = false
   self.bound = false
   self.onStart = nil
   self.onStateChanged = nil
   self.onFinish = nil
end

function Transition:Bind()
   if self.bound then
      return
   end

   self.bound = true
   if self.window then
      local window = self.window
      window.StateChanged = { this = self, callback = self.StateChanged }
   end
end

function Transition:Unbind()
   if not self.bound then
      return
   end

   self.bound = false
   if self.window then
      local window = self.window
      window.StateChanged = { this = self }
   end
end

function Transition:WaitForDone()
   return ExecutorsExt.Instance:WaitWhile(function()
      return not self.done
   end)
end

function Transition:StateChanged(sender, args)
   self:RaiseStateChanged(sender, args.State)
end

function Transition:RaiseStateChanged(window, state)
   if self.onStateChanged then
      self.onStateChanged(window, state)
   end
end

function Transition:RaiseStart()
   if self.onStart then
      self.onStart()
   end
end

function Transition:RaiseFinished()
   if self.onFinish then
      self.onFinish()
   end
end

function Transition:OnStart()
   self:Bind()
   self:RaiseStart()
end

function Transition:OnEnd()
   self.done = true
   self:RaiseFinished()
   self:Unbind()
end

function Transition:GetAwaiter()
   return TransitionAwaiter(self)
end

function Transition:OnStartByCallBack(callback)
   if self.running then
      return self
   end

   self.onStart = callback
   return self
end

function Transition:OnStateChanged(callback)
   if self.running then
      return self
   end

   self.onStateChanged = callback
   return self
end

function Transition:OnFinish(callback)
   if self.done then
      callback()
      return self
   end

   self.onFinish = callback
   return self
end

function Transition:DisableAnimation(disabled)
   if self.running then
      return self
   end

   self.animationDisabled = disabled
   return self
end

function Transition:TransitionTask()
   self.running = true
   self:OnStart()

   local result = ExecutorsExt.Instance:RunOnCoroutine(CoroutineExt.GetEnumerator(function()
      self:DoTransition()
   end))
   CoroutineExt.Yield(result:WaitForDone())

   self:OnEnd()
end

function Transition:DoTransition()
   print("DoTransition")
end

function Transition:dtor()
end

return Transition
