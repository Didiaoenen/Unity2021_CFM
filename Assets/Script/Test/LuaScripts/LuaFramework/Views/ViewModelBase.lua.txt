local ObservableObject = require("LuaFramework.Observables.ObservableObject")

local ViewModelBase = class("ViewModelBase", ObservableObject)

function ViewModelBase.get:Parent()
    return self.parent
end

function ViewModelBase.set:Parent(value)
    self:Set({name = "parent"}, value, "Parent")
end

function ViewModelBase.get:LocalRotation()
    return self.localRotation
end

function ViewModelBase.set:LocalRotation(value)
    self:Set({name = "localRotation"}, value, "LocalRotation")
end

function ViewModelBase.get:LocalPosition()
    return self.localPosition
end

function ViewModelBase.set:LocalPosition(value)
    self:Set({name = "localPosition"}, value, "LocalPosition")
end

function ViewModelBase.get:LocalScale()
    return self.localScale
end

function ViewModelBase.set:LocalScale(value)
    self:Set({name = "localScale"}, value, "LocalScale")
end

function ViewModelBase.get:OffsetMax()
    return self.offsetMax
end

function ViewModelBase.set:OffsetMax(value)
    self:Set({name = "offsetMax"}, value, "OffsetMax")
end

function ViewModelBase.get:OffsetMin()
    return self.offsetMin
end

function ViewModelBase.set:OffsetMin(value)
    self:Set({name = "offsetMin"}, value, "OffsetMin")
end

function ViewModelBase.get:ActiveSelf()
    return self.activeSelf
end

function ViewModelBase.set:ActiveSelf(value)
    self:Set({name = "activeSelf"}, value, "ActiveSelf")
end

function ViewModelBase.get:OverrideSorting()
    return self.overrideSorting
end

function ViewModelBase.set:OverrideSorting(value)
    self:Set({name = "overrideSorting"}, value, "OverrideSorting")
end

function ViewModelBase.get:SortingOrder()
    return self.sortingOrder
end

function ViewModelBase.set:SortingOrder(value)
    self:Set({name = "sortingOrder"}, value, "SortingOrder")
end

function ViewModelBase.get:Alpha(value)
    return self.alpha
end

function ViewModelBase.set:Alpha(value)
    self:Set({name = "alpha"}, value, "Alpha")
end

function ViewModelBase:ctor(messenger)
    ObservableObject.ctor(self)
    self.messenger = messenger

    self.parent = RectTransform.new(CSharpType.GameObject.Find("UIRoot").transform).handler
    self.localRotation = CSharpType.Quaternion.identity
    self.localPosition = CSharpType.Vector3.zero
    self.localScale = CSharpType.Vector3.one
    self.offsetMax = CSharpType.Vector2.zero
    self.offsetMin = CSharpType.Vector2.zero
    self.activeSelf = true
    self.overrideSorting = true
    self.sortingOrder = 0
    self.alpha = 1
end

function ViewModelBase:SetWithBroadCast(field, newValue, propertyName, broadcast)
    if field ~= newValue then
        ObservableObject.Set(self, field, newValue, propertyName)

        if broadcast then
            self:Broadcast(self[field.name], newValue, propertyName)
        end
    end
end

function ViewModelBase:Broadcast(oldValue, newVlaue, propertyName)
    
end

function ViewModelBase:dtor()
    
end

return ViewModelBase