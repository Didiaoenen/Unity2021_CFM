local ObservableObject = require("LuaFramework.Observables.ObservableObject")

local ViewModelBase = class("ViewModelBase", ObservableObject)

function ViewModelBase.set:OverrideSorting(value)
    self:Set({name = "overrideSorting"}, value, "OverrideSorting")
end

function ViewModelBase.set:SortingOrder(value)
    self:Set({name = "sortingOrder"}, value, "SortingOrder")
end

function ViewModelBase.set:Alpha(value)
    self:Set({name = "alpha"}, value, "Alpha")
end

function ViewModelBase:ctor(messenger)
    ObservableObject.ctor(self)
    self.messenger = messenger

    self.overrideSorting = true
    self.sortingOrder = 0
    self.alpha = 1
end

function ViewModelBase:SetWithBroadCast(field, newValue, propertyName, broadcast)
    if field ~= newValue then
        ObservableObject.Set(self, field, newValue, propertyName)

        if broadcast then
            self:Broadcast(self[field.name], newValue, propertyName)
        end
    end
end

function ViewModelBase:Broadcast(oldValue, newVlaue, propertyName)
    
end

function ViewModelBase:dtor()
    
end

return ViewModelBase