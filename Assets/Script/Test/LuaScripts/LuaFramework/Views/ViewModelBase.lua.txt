local ObservableObject = require("LuaFramework.Observables.ObservableObject")
local RectTransformExt = require("LuaFramework.Views.Components.RectTransformExt")

local ViewModelBase = class("ViewModelBase", ObservableObject)

function ViewModelBase.get:Parent()
   return self.parent
end

function ViewModelBase.set:Parent(value)
   self:Set({ name = "parent" }, value, "Parent")
end

function ViewModelBase.get:LocalRotation()
   return self.localRotation
end

function ViewModelBase.set:LocalRotation(value)
   self:Set({ name = "localRotation" }, value, "LocalRotation")
end

function ViewModelBase.get:LocalPosition()
   return self.localPosition
end

function ViewModelBase.set:LocalPosition(value)
   self:Set({ name = "localPosition" }, value, "LocalPosition")
end

function ViewModelBase.get:LocalScale()
   return self.localScale
end

function ViewModelBase.set:LocalScale(value)
   self:Set({ name = "localScale" }, value, "LocalScale")
end

function ViewModelBase.get:OffsetMax()
   return self.offsetMax
end

function ViewModelBase.set:OffsetMax(value)
   self:Set({ name = "offsetMax" }, value, "OffsetMax")
end

function ViewModelBase.get:OffsetMin()
   return self.offsetMin
end

function ViewModelBase.set:OffsetMin(value)
   self:Set({ name = "offsetMin" }, value, "OffsetMin")
end

function ViewModelBase.get:ActiveSelf()
   return self.activeSelf
end

function ViewModelBase.set:ActiveSelf(value)
   self:Set({ name = "activeSelf" }, value, "ActiveSelf")
end

function ViewModelBase.get:OverrideSorting()
   return self.overrideSorting
end

function ViewModelBase.set:OverrideSorting(value)
   self:Set({ name = "overrideSorting" }, value, "OverrideSorting")
end

function ViewModelBase.get:SortingOrder()
   return self.sortingOrder
end

function ViewModelBase.set:SortingOrder(value)
   self:Set({ name = "sortingOrder" }, value, "SortingOrder")
end

function ViewModelBase.get:Alpha()
   return self.alpha
end

function ViewModelBase.set:Alpha(value)
   self:Set({ name = "alpha" }, value, "Alpha")
end

function ViewModelBase:ctor(messenger)
   ObservableObject.ctor(self)
   self.messenger = messenger

   self.parent = RectTransformExt.new(CS.UnityEngine.GameObject.Find("UIRoot").transform)
   self.localRotation = CS.UnityEngine.Quaternion.identity
   self.localPosition = CS.UnityEngine.Vector3.zero
   self.localScale = CS.UnityEngine.Vector3.one
   self.offsetMax = CS.UnityEngine.Vector2.zero
   self.offsetMin = CS.UnityEngine.Vector2.zero
   self.activeSelf = true
   self.overrideSorting = true
   self.sortingOrder = 0
   self.alpha = 1
end

function ViewModelBase:SetWithBroadCast(field, newValue, propertyName, broadcast)
   if field ~= newValue then
      ObservableObject.Set(self, field, newValue, propertyName)

      if broadcast then
         local oldValue = classget(self, field.name)
         self:Broadcast(oldValue, newValue, propertyName)
      end
   end
end

function ViewModelBase:Broadcast(oldValue, newVlaue, propertyName)
   assert({ oldValue, newVlaue, propertyName }, "")
end

function ViewModelBase:dtor()
end

return ViewModelBase
