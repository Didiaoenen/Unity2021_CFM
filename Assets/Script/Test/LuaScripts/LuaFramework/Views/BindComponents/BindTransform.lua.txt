local BindComponent = require("LuaFramework.Views.BindComponents.BindComponent")
local TransformExt = require("LuaFramework.Views.Components.TransformExt")

local BindTransform = class("BindTransform", BindComponent)

function BindTransform.get:Parent()
   return self.parent
end

function BindTransform.set:Parent(value)
   self:Set({ name = "parent" }, value, "Parent")
end

function BindTransform.get:LocalRotation()
   return self.localRotation
end

function BindTransform.set:LocalRotation(value)
   self:Set({ name = "localRotation" }, value, "LocalRotation")
end

function BindTransform.get:LocalPosition()
   return self.localPosition
end

function BindTransform.set:LocalPosition(value)
   self:Set({ name = "localPosition" }, value, "LocalPosition")
end

function BindTransform.get:LocalScale()
   return self.localScale
end

function BindTransform.set:LocalScale(value)
   self:Set({ name = "localScale" }, value, "LocalScale")
end

function BindTransform:ctor()
   BindComponent.ctor(self)
   self.parent = nil
   self.localRotation = CS.UnityEngine.Quaternion.identity
   self.localPosition = CS.UnityEngine.Vector3.zero
   self.localScale = CS.UnityEngine.Vector3.one
end

function BindTransform:BindWithName(view, name, modes)
   local component = view:GetComponentWithName(TransformExt, name)
   local bindingSet = view.bindingSet
   local transformExt = component

   local index = 0
   local _Mode = function()
      index = #(modes) > 1 and index + 1 or 1
      return modes[index]
   end

   local builder = bindingSet:BindByTarget(component)
   builder:For(transformExt.Parent):To(name .. ".Parent"):SetMode(_Mode())

   builder = bindingSet:BindByTarget(component)
   builder:For(transformExt.LocalRotation):To(name .. ".LocalRotation"):SetMode(_Mode())

   builder = bindingSet:BindByTarget(component)
   builder:For(transformExt.LocalPosition):To(name .. ".LocalPosition"):SetMode(_Mode())

   builder = bindingSet:BindByTarget(component)
   builder:For(transformExt.LocalScale):To(name .. ".LocalScale"):SetMode(_Mode())
end

function BindTransform:dtor()
end

return BindTransform
