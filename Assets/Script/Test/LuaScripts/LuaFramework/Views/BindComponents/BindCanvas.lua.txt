local BindComponent = require("LuaFramework.Views.BindComponents.BindComponent")

local BindCanvas = class("BindCanvas", BindComponent)

function BindCanvas.get:OverrideSorting()
   return self.overrideSorting
end

function BindCanvas.set:OverrideSorting(value)
   self:Set({ name = "overrideSorting" }, value, "OverrideSorting")
end

function BindCanvas.get:SortingOrder()
   return self.sortingOrder
end

function BindCanvas.set:SortingOrder(value)
   self:Set({ name = "sortingOrder" }, value, "SortingOrder")
end

function BindCanvas:ctor()
   BindComponent.ctor(self)
   self.overrideSorting = true
   self.sortingOrder = 0
end

function BindCanvas:BindWithName(view, cType, name, modes)
   local component = view:GetComponentWithName(cType, name)
   local bindingSet = view.bindingSet
   local canvasExt = component

   local index = 0
   local _Mode = function()
      index = #(modes) > 1 and index + 1 or 1
      return modes[index]
   end

   local builder = bindingSet:BindByTarget(component)
   builder:For(canvasExt.OverrideSorting):To(name .. ".OverrideSorting"):SetMode(_Mode())

   builder = bindingSet:BindByTarget(component)
   builder:For(canvasExt.SortingOrder):To(name .. ".SortingOrder"):SetMode(_Mode())
end

function BindCanvas:dtor()
end

return BindCanvas
