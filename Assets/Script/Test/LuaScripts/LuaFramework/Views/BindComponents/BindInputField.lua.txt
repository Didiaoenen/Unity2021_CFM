local BindComponent = require("LuaFramework.Views.BindComponents.BindComponent")
local SimpleCommand = require("LuaFramework.Commands.SimpleCommand")

local BindInputField = class("BindInputField", BindComponent)

function BindInputField.get:Text()
   return self.text
end

function BindInputField.set:Text(value)
   self:Set({ name = "text" }, value, "Text")
end

function BindInputField.get:OnValueChanged()
   return self.onValueChanged
end

function BindInputField.set:OnValueChanged(value)
   self:Set({ name = "onValueChanged" }, value, "OnValueChanged")
end

function BindInputField.get:SimpleCommand()
   return self.simpleCommand
end

function BindInputField.set:SimpleCommand(value)
   self:Set({ name = "simpleCommand" }, value, "SimpleCommand")
end

function BindInputField:ctor()
   BindComponent.ctor(self)
   self.text = ""
   self.onValueChanged = function() end
   self.simpleCommand = SimpleCommand.new(function() end)
end

function BindInputField:BindWithName(view, cType, name, modes)
   local component = view:GetComponentWithName(cType, name)
   local bindingSet = view.bindingSet
   local inputFieldExt = component

   local index = 0
   local _Mode = function()
      index = #(modes) > 1 and index + 1 or 1
      return modes[index]
   end

   local builder = bindingSet:BindByTarget(component)
   builder:For(inputFieldExt.Text, inputFieldExt.OnEndEdit):To(name .. ".Text"):SetMode(_Mode())

   builder = bindingSet:BindByTarget(component)
   builder:For(inputFieldExt.OnValueChanged):To(name .. ".OnValueChanged"):SetMode(_Mode())

   builder = bindingSet:BindByTarget(component)
   builder:For(inputFieldExt.OnValueChanged):To(name .. ".SimpleCommand"):SetMode(_Mode())

   builder = bindingSet:BindByTarget(component.gameObject)
   builder:For(inputFieldExt.GameObject.ActiveSelf):To(name .. ".GameObject.ActiveSelf"):SetMode(_Mode())
end

function BindInputField:dtor()
end

return BindInputField
