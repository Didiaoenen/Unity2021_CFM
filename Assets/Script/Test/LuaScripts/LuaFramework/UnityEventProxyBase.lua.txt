local EventTargetProxyBase = require("EventTargetProxyBase")

local UnityEventProxyBase = class("UnityEventProxyBase", EventTargetProxyBase)

UnityEventProxyBase.__getter.DefaultMode = function (this, k)
    return BindingMode.OneWay
end

function UnityEventProxyBase:ctor(target, unityEvent)
    self.super:ctor(target)

    self.command = nil
    self.invoker = nil
    self.handler = nil
    self.interactable = nil
    self.unityEvent = unityEvent
    self:BindEvent()
end

function UnityEventProxyBase:BindEvent()
end

function UnityEventProxyBase:UnbindEvent()
end

function UnityEventProxyBase:IsValidHandler(handler)
end

function  UnityEventProxyBase:IsValidInvoker(invoker)
end

function UnityEventProxyBase:SetValue(value)
    local target = self.Target
    if not target then
        return
    end

    if self.command then
        self:UnbindCommand(self.command)
        self.command = nil
    end

    if self.invoker then
        self.invoker = nil
    end

    if self.handler then
        self.handler = nil
    end

    if not value then
        return
    end

    if value:GetName() == "ICommand" then
        if not self.interactable then
            
        end

        self.command = value
        self:BindCommand(self.command)
        self:UpdateTargetInteractable()
    end

    if value:GetName() == "IProxyInvoker" then
        if self:IsValidInvoker(value) then
            self.invoker = value
            return
        end

        error("")
    end

    if value:GetName() == "Delegate" then
        if self.IsValidHandler(value) then
            self.handler = value
            return
        end

        error("")
    end

    if value:GetName() == "IInvoker" then
        self.invoker = value
    end
end

function UnityEventProxyBase:OnCanExecuteChanged(sender, e)
    Executors.RunOnMainThread(self.UpdateTargetInteractable)
end

function UnityEventProxyBase:UpdateTargetInteractable()
    local target = self.Target
    if not self.interactable or not target then
        return
    end

    local value = not self.command and false or self.command:CanExecute()
    if self.interactable:GetName() == "IProxyPropertyInfo" then
        self.interactable:SetValue(target, value)
        return
    end

    self.interactable:SetValue(target, value)
end

function UnityEventProxyBase:BindCommand(command)
    if not command then
        return
    end

    command.CanExecuteChanged = function ()
        self:OnCanExecuteChanged()
    end
end

function UnityEventProxyBase:UnbindCommand(command)
    if not command then
        return
    end

    command.CanExecuteChanged = nil
end

function UnityEventProxyBase:Dispose()
end

return UnityEventProxyBase