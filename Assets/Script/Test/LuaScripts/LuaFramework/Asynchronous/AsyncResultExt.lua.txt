local AsyncResultExt = class("AsyncResultExt")

function AsyncResultExt.get:IsDone()
   return self.csharp.done
end

function AsyncResultExt.get:Result()
   return self.csharp.result
end

function AsyncResultExt.get:IsCancellationRequested()
   return self.csharp.cancellationRequested
end

function AsyncResultExt.get:IsCancelled()
   return self.csharp.cancelled
end

function AsyncResultExt:ctor(cancelable)
   self.csharp = CS.Asynchronous.AsyncResult(cancelable or false)
end

function AsyncResultExt:SetException(errorMsg)
   error(errorMsg)
end

function AsyncResultExt:SetResult(result)
   self.csharp:SetResult(result)
end

function AsyncResultExt:SetCancelled()
   self.csharp:SetCancelled()
end

function AsyncResultExt:Cancel()
   return self.csharp:Cancel()
end

function AsyncResultExt:Callbackable()
   return self.csharp:Callbackable()
end

function AsyncResultExt:Synchronized()
   return self.csharp:Synchronized()
end

function AsyncResultExt:WaitForDone()
   return self.csharp:WaitForDone()
end

function AsyncResultExt:dtor()
end

return AsyncResultExt
