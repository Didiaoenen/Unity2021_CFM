local ValueTargetProxyBase = require("LuaFramework/ValueTargetProxyBase")

local FieldTargetProxy = class("FieldTargetProxy", ValueTargetProxyBase)

FieldTargetProxy.__getter.DefaultMode = function (this, k)
    return BindingMode.OneWay
end

function FieldTargetProxy:ctor(target, fieldInfo)
    self.super:ctor(target)
    self.fieldInfo = fieldInfo
end

function FieldTargetProxy:GetValue()
    local target = self.Target
    if not target then
        return
    end

    if self.fieldInfo:GetName() == "IProxyFieldInfo" then
        return self.fieldInfo:GetValue(target)
    end

    return self.fieldInfo:GetValue(target)
end

function FieldTargetProxy:SetValue(value)
    local target = self.Target
    if not target then
        return
    end

    if self.fieldInfo:GetName() == "IProxyFieldInfo" then
        self.fieldInfo:SetValue(target, value)
        return
    end

    self.fieldInfo:SetValue(target, value)
end

return FieldTargetProxy