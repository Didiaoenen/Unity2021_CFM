local IntItemNodeProxy = require("LuaFramework/IntItemNodeProxy")
local StringItemNodeProxy = require("LuaFramework/StringItemNodeProxy")
local ObservableNodeProxy = require("LuaFramework/ObservableNodeProxy")
local InteractionNodeProxy = require("LuaFramework/InteractionNodeProxy")
local PropertyNodeProxy = require("LuaFramework/PropertyNodeProxy")
local MethodNodeProxy = require("LuaFramework/MethodNodeProxy")
local EventNodeProxy = require("LuaFramework/EventNodeProxy")

local UniversalNodeProxyFactory = class("UniversalNodeProxyFactory")

function UniversalNodeProxyFactory:ctor()
    
end

function UniversalNodeProxyFactory:Create(source, path)
    local node = path[1]
    if not source and not node.IsStatic then
        error("")
        return
    end

    if node.IsStatic then
        return self:CreateStaticProxy(node)
    end

    return self:CreateProxy(source, node)
end

function UniversalNodeProxyFactory:CreateProxy(source, node)
    local memberInfo = source[node]
    if not memberInfo then
        error("")
        return
    end

    if type(memberInfo) == "function" then
        return MethodNodeProxy(source, node)
    elseif type(memberInfo) == "userdata" then

    else
        if type(memberInfo) == "table" then
            if source[node].__classname == "InteractionRequest" then
                return InteractionNodeProxy(source, node)
            end
        end

        return PropertyNodeProxy(source, node)
    end
end

function UniversalNodeProxyFactory:CreateStaticProxy()
    
end

return UniversalNodeProxyFactory