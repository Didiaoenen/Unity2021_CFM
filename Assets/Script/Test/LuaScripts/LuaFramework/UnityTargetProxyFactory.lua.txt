local UnityPropertyProxy = require("LuaFramework/UnityPropertyProxy")
local UnityFieldProxy = require("LuaFramework/UnityFieldProxy")
local UnityEventProxy = require("LuaFramework/UnityEventProxy")

local UnityTargetProxyFactory = class("UnityTargetProxyFactory")

function UnityTargetProxyFactory:ctor()
    
end

function UnityTargetProxyFactory:CreateProxy(target, description)
    local object = CS.UnityEngine[target]
    local memberInfo = object[description.TargetName];
    if not memberInfo then
        error("")        
        return
    end

    local updateTrigger = nil
    if description.UpdateTrigger and description.UpdateTrigger ~= "" then
        local updateTriggerInfo = object[description.UpdateTrigger]
        
        if not updateTriggerInfo then
            error("")
            return            
        end
    end

    if memberInfo:GetName() == "IProxyPropertyInfo" then
        if memberInfo:NameContains() == "IObservableProperty" then
            return
        end  

        if memberInfo:NameContains() == "UnityEventBase" then
            local unityEvent = memberInfo[target]
            return self:CreateUnityEventProxy(target, unityEvent)
        end

        if not updateTrigger then
            error("")
            return
        end

        return self:CreateUnityPropertyProxy(target, memberInfo, updateTrigger)
    end

    if memberInfo:GetName() == "IProxyFieldInfo" then
        if memberInfo:NameContains() == "IObservableProperty" then
            return
        end

        if memberInfo:NameContains() == "UnityEventBase" then
            local unityEvent = memberInfo[target]
            return self:CreateUnityEventProxy(target, unityEvent)
        end

        if not updateTrigger then
            error("")
            return
        end

        return self:CreateUnityFieldProxy(target, memberInfo, updateTrigger)
    end
end

function UnityTargetProxyFactory:CreateUnityPropertyProxy(target, propertyInfo, updateTrigger)
    return UnityPropertyProxy(target, propertyInfo, updateTrigger)
end

function UnityTargetProxyFactory:CreateUnityFieldProxy(target, fieldInfo, updateTrigger)
    return UnityFieldProxy(target, fieldInfo, updateTrigger);
end

function UnityTargetProxyFactory:CreateUnityEventProxy(target, unityEvent)
    return UnityEventProxy(target, unityEvent);
end

return UnityTargetProxyFactory