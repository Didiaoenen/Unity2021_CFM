local TypedSourceProxyFactory = require("LuaFramework/TypedSourceProxyFactory")

local ObjectSourceDescription = require("LuaFramework/ObjectSourceDescription")
local ExpressionSourceProxy = require("LuaFramework/ExpressionSourceProxy")

local ExpressionSourceProxyFactory = class("ExpressionSourceProxyFactory", TypedSourceProxyFactory)

function ExpressionSourceProxyFactory:ctor(factory)
    self.factory = factory
end

function ExpressionSourceProxyFactory:TryCreateProxy(source, description, proxy)
    proxy = nil
    local expression = description.Expression
    local list = {}
    local paths = PathFinder.FindPaths(expression)
    for i, path in ipairs(paths) do
        if not path.IsStatic then
        end

        local innerProxy = self.factory:CreateProxy(source, ObjectSourceDescription(path))
        if innerProxy then
            table.insert(list, innerProxy)
        end
    end

    try
    {
        function ()
            local del = expression:Compile()
            local returnType = del:ReturnType()
            local parameterType = del:ParameterType()
            if parameterType then
                proxy = ExpressionSourceProxy(source, del, list)
            else
                proxy = ExpressionSourceProxy(del, list)
            end
        end,
        catch = function ()
            
        end
    }

    if proxy then
        return true
    end

    return false
end

return ExpressionSourceProxyFactory