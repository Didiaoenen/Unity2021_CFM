local AbstractBinding = class("AbstractBinding")

function AbstractBinding.get:BindingContext()
    return self.bindingContext
end

function AbstractBinding.set:BindingContext(value)
    self.bindingContext = value
end

function AbstractBinding.get:Target()
    assert(self.target, "")
    local target = self.target.Target
    return self:IsAlive(target) and target
end

function AbstractBinding.get:DataContext()
    return self.dataContext
end

function AbstractBinding.set:DataContext(value)
    if value ~= self.dataContext then
        self.dataContext = value
        self:OnDataContextChanged()
    end
end

function AbstractBinding:ctor(bindingContext, dataContext, target)
    self.bindingContext = bindingContext
    self.dataContext = dataContext
    self.target = target
end

function AbstractBinding:IsAlive(target)
    
end

function AbstractBinding:OnDataContextChanged()
    
end

function AbstractBinding:dtor()
    
end

return AbstractBinding