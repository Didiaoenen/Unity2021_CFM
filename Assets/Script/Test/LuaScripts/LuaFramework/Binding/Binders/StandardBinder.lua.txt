
local SourceProxyFactory = require("LuaFramework.Binding.Proxy.Sources.SourceProxyFactory")
local TargetProxyFactory = require("LuaFramework.Binding.Proxy.Targets.TargetProxyFactory")
local ObjectSourceProxyFactory = require("LuaFramework.Binding.Proxy.Sources.Object.ObjectSourceProxyFactory")
local UniversalNodeProxyFactory = require("LuaFramework.Binding.Proxy.Sources.Object.UniversalNodeProxyFactory")
local LiteralSourceProxyFactory = require("LuaFramework.Binding.Proxy.Sources.Text.LiteralSourceProxyFactory")
local ExpressionSourceProxyFactory = require("LuaFramework.Binding.Proxy.Sources.Expressions.ExpressionSourceProxyFactory")
local UniversalTargetProxyFactory = require("LuaFramework.Binding.Proxy.Targets.Universal.UniversalTargetProxyFactory")
local UnityTargetProxyFactory = require("LuaFramework.Binding.Proxy.Targets.UGUI.UnityTargetProxyFactory")

local Binding = require("LuaFramework.Binding.Binding")

local StandardBinder = class("StandardBinder")

local instance = nil

function StandardBinder.Instance()
    if not instance then
        instance = StandardBinder()
        instance:ctor()
    end
end

function StandardBinder:ctor()
    local objectSourceProxyFactory = ObjectSourceProxyFactory()
    objectSourceProxyFactory:Register(UniversalNodeProxyFactory(), 0)

    local sourceProxyFactory = SourceProxyFactory()
    sourceProxyFactory:Register(LiteralSourceProxyFactory(), 0)
    sourceProxyFactory:Register(ExpressionSourceProxyFactory(sourceProxyFactory), 1)
    sourceProxyFactory:Register(objectSourceProxyFactory, 2)

    local targetProxyFactory = TargetProxyFactory()
    targetProxyFactory:Register(UniversalTargetProxyFactory(), 0)
    targetProxyFactory:Register(UnityTargetProxyFactory(), 10)

    local binder = StandardBinder(sourceProxyFactory, targetProxyFactory)

    self.sourceProxyFactory = sourceProxyFactory
    self.targetProxyFactory = targetProxyFactory
end

function StandardBinder:Bind(bindingContext, source, target, bindingDecription)
    return Binding(bindingContext, source, target, bindingDecription, self.sourceProxyFactory, self.targetProxyFactory)
end

return StandardBinder