local StandardBinder = require("LuaFramework.Binding.Binders.StandardBinder")
local TableExtention = require("LuaFramework.Common.TableExtention")

local BindingContext = class("BindingContext")

function BindingContext.get:DataContext()
   return self.dataContext
end

function BindingContext.set:DataContext(value)
   if value ~= self.dataContext then
      self.dataContext = value
      self:OnDataContextChanged()
      self:RaiseDataContextChanged()
   end
end

function BindingContext.set:DataContextChanged(value)
   setcallback(self.dataContextChanged, value)
end

function BindingContext:ctor(owner, dataContext)
   self.owner = owner
   self.dataContext = dataContext


   self.bindings = {}
   self.dataContextChanged = {}
   self.DEFAULT_KEY = "_KEY_"
end

function BindingContext:OnDataContextChanged()
   for _, binding in pairs(self.bindings) do
      for _, v in ipairs(binding) do
         v.DataContext = self.dataContext
      end
   end
end

function BindingContext:RaiseDataContextChanged()
   TableExtention.Foreach(self.dataContextChanged, function(_, v)
      v.callback(v.this)
   end)
end

function BindingContext:GetOrCreateList(key)
   if nil == key or key == "" then
      key = self.DEFAULT_KEY
   end

   if nil == self.bindings[key] then
      self.bindings[key] = {}
   end

   return self.bindings[key]
end

function BindingContext:Add(binding, key)
   if not binding then
      return
   end

   local list = self:GetOrCreateList(key)
   table.insert(list, binding)
end

function BindingContext:AddWithSingleDesc(target, description, key)
   local binding = StandardBinder.Instance:Bind(self.dataContext, target, description)
   self:Add(binding, key)
end

function BindingContext:dtor()
end

return BindingContext
