local BindingContext = class("BindingContext")

function BindingContext.get:DataContext()
    return self.dataContext
end

function BindingContext.set:DataContext(value)
    if value ~= self.dataContext then
        self.dataContext = value
        self:OnDataContextChanged()
        self:RaiseDataContextChanged()
    end
end

function BindingContext.set:DataContextChanged(value)
    setcallback(self.dataContextChanged, value)
end

function BindingContext:ctor(owner, dataContext)
    self.owner = owner
    self.dataContext = dataContext

    --
    self.bindings = {}
    self.dataContextChanged = {}
    self.DEFAULT_KEY = "_KEY_"
end

function BindingContext:OnDataContextChanged()
    for k, binding in pairs(self.bindings) do
        for i, v in ipairs(binding) do
            v.DataContext = self.dataContext
        end
    end
end

function BindingContext:RaiseDataContextChanged()
    table.foreach(self.dataContextChanged, function (i, v)
        v.callback(v.this)
    end)
end

function BindingContext:GetOrCreateList(key)
    if not key then
        key = self.DEFAULT_KEY        
    end

    if not self.bindings[key] then
        self.bindings[key] = {}
    end
    
    return self.bindings[key]
end

function BindingContext:Add(binding, key)
    if not binding then
        return        
    end

    local list = self:GetOrCreateList()
    binding.BindingContext = self
    table.insert(list, binding)
end

function BindingContext:AddBySingleDesc(target, description, key)
    local binding = StandardBinder:Bind(self, self.dataContext, target, description)
    self:Add(binding, key)
end

function BindingContext:dtor()

end

return BindingContext