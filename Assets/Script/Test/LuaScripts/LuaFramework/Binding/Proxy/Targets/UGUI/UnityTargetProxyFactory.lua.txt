local Misc = require("LuaFramework.Common.Misc")
local ITargetProxyFactory = require("LuaFramework.Binding.Proxy.Targets.ITargetProxyFactory")
local UnityPropertyProxy = require("LuaFramework.Binding.Proxy.Targets.UGUI.UnityPropertyProxy")
local UnityEventProxy = require("LuaFramework.Binding.Proxy.Targets.UGUI.UnityEventProxy")

local UnityTargetProxyFactory = class("UnityTargetProxyFactory", ITargetProxyFactory)

function UnityTargetProxyFactory:ctor()

end

function UnityTargetProxyFactory:CreateProxy(target, description)
   local memberInfo = classget(target, description.TargetName)

   local updateTrigger = nil
   if description.UpdateTrigger and "" ~= description.UpdateTrigger then
      updateTrigger = classget(target, description.UpdateTrigger)
      assert(updateTrigger, "")
   end

   if "userdata" == type(memberInfo) then
      if Misc.CSType.UnityEventBaseT:IsAssignableFrom((memberInfo):GetType()) then
         return UnityEventProxy.new(target, description.TargetName)
      else
         if nil == updateTrigger then
            return
         end
      end
   else
      if nil == updateTrigger then
         return
      end

      return UnityPropertyProxy.new(target, description.TargetName, description.UpdateTrigger)
   end
end

function UnityTargetProxyFactory:dtor()
end

return UnityTargetProxyFactory
