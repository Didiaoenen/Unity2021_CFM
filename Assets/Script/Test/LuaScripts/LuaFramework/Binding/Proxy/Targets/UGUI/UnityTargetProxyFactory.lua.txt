local UnityPropertyProxy = require("LuaFramework.Binding.Proxy.Targets.UGUI.UnityPropertyProxy")
local UnityFieldProxy = require("LuaFramework.Binding.Proxy.Targets.UGUI.UnityFieldProxy")
local UnityEventProxy = require("LuaFramework.Binding.Proxy.Targets.UGUI.UnityEventProxy")

local UnityTargetProxyFactory = class("UnityTargetProxyFactory")

function UnityTargetProxyFactory:ctor()
    
end

function UnityTargetProxyFactory:CreateProxy(target, description)
    local memberInfo = target[description.TargetName]
    assert(memberInfo ~= nil, "")

    local updateTrigger = nil
    if description.UpdateTrigger and description.UpdateTrigger ~= "" then
        updateTrigger = target[description.UpdateTrigger]
        assert(updateTrigger, "")
    end

    if type(memberInfo) == "userdata" then
        if typeof(CS.UnityEngine.Events.UnityEventBase):IsAssignableFrom(memberInfo:GetType()) then
            return self:CreateUnityEventProxy(target, description.TargetName)
        else
            if not updateTrigger then
                return
            end
        end
    else
        if not updateTrigger then
            return
        end

        return self:CreateUnityPropertyProxy(target, description.TargetName, description.UpdateTrigger)
    end
end

function UnityTargetProxyFactory:CreateUnityPropertyProxy(target, propertyInfo, updateTrigger)
    return UnityPropertyProxy(target, propertyInfo, updateTrigger)
end

function UnityTargetProxyFactory:CreateUnityFieldProxy(target, fieldInfo, updateTrigger)
    return UnityFieldProxy(target, fieldInfo, updateTrigger)
end

function UnityTargetProxyFactory:CreateUnityEventProxy(target, unityEvent)
    return UnityEventProxy(target, unityEvent)
end

function UnityTargetProxyFactory:dtor()
    
end

return UnityTargetProxyFactory