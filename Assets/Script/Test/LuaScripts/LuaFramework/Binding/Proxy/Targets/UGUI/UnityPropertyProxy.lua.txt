local PropertyTargetProxy = require("LuaFramework.Binding.Proxy.Targets.Universal.PropertyTargetProxy")
local BindingMode = require("LuaFramework.Binding.BindingMode")

local UnityPropertyProxy = class("UnityPropertyProxy", PropertyTargetProxy)

function UnityPropertyProxy.get:DefaultMode()
   return BindingMode.TwoWay
end

function UnityPropertyProxy:ctor(target, propertyInfo, unityEvent)
   PropertyTargetProxy.ctor(self, target, propertyInfo)
   self.unityEvent = unityEvent
end

function UnityPropertyProxy:DoSubscribeForValueChange(target)
   assert({ target }, "")
   local unityEvent = classget(self.target, self.unityEvent)
   if unityEvent then
      unityEvent:AddListener(bindevent(self, self.OnValueChanged))
   end
end

function UnityPropertyProxy:DoUnsubscribeForValueChange()
   local unityEvent = classget(self.target, self.unityEvent)
   if unityEvent then
      unityEvent:RemoveAllListeners()
   end
end

function UnityPropertyProxy:OnValueChanged(...)
   assert({ ... }, "")
   self:RaiseValueChanged()
end

function UnityPropertyProxy:dtor()

end

return UnityPropertyProxy
