local TargetProxyBase = require("LuaFramework.Binding.Proxy.Targets.TargetProxyBase")

local MethodTargetProxy = class("MethodTargetProxy", TargetProxyBase)

function MethodTargetProxy.get:DefaultMode()
    return BindingMode.OneWayToSource
end

function MethodTargetProxy.get:ProxyMethodInfo()
    return self.methodInfo
end

function MethodTargetProxy:ctor(target, methodInfo)
    TargetProxyBase.ctor(self, target)
    self.methodInfo = methodInfo
    self.invoker = self
end

function MethodTargetProxy:GetValue()
    return self.invoker
end

function MethodTargetProxy:Invoke(sender, args)
    local target = self.target
    if not target then
        return
    end

    target[self.methodInfo](target, sender, args)
end

function MethodTargetProxy:dtor()
    
end

return MethodTargetProxy