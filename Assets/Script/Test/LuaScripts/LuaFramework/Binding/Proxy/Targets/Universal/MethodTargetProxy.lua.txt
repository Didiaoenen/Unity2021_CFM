local TargetProxyBase = require("LuaFramework.Binding.Proxy.Targets.TargetProxyBase")
local BindingMode = require("LuaFramework.Binding.BindingMode")

local MethodTargetProxy = class("MethodTargetProxy", TargetProxyBase)

function MethodTargetProxy.get:DefaultMode()
   return BindingMode.OneWayToSource
end

function MethodTargetProxy.get:ProxyMethodInfo()
   return self.methodInfo
end

function MethodTargetProxy:ctor(target, methodInfo)
   TargetProxyBase.ctor(self, target)
   self.methodInfo = methodInfo
   self.invoker = self
end

function MethodTargetProxy:GetValue()
   return self.invoker
end

function MethodTargetProxy:Invoke(sender, ...)
   local target = self.target
   if nil == target then
      return
   end

   local functionType = classget(target, self.methodInfo)
   functionType(target, sender, ...)
end

function MethodTargetProxy:dtor()
end

return MethodTargetProxy
