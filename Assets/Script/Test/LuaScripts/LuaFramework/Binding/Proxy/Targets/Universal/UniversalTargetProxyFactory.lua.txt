local ITargetProxyFactory = require("LuaFramework.Binding.Proxy.Targets.ITargetProxyFactory")
local FieldOrPropertyTargetProxy = require("LuaFramework.Binding.Proxy.Targets.Universal.FieldOrPropertyTargetProxy")
local MethodTargetProxy = require("LuaFramework.Binding.Proxy.Targets.Universal.MethodTargetProxy")

local UniversalTargetProxyFactory = class("UniversalTargetProxyFactory", ITargetProxyFactory)

function UniversalTargetProxyFactory:ctor()

end

function UniversalTargetProxyFactory:CreateProxy(target, description)
   local memberInfo = classget(target, description.TargetName)

   if "userdata" == type(memberInfo) then
      return FieldOrPropertyTargetProxy.new(target, description.TargetName)
   end

   if "function" == type(memberInfo) then
      return MethodTargetProxy.new(target, description.TargetName)
   end

   return FieldOrPropertyTargetProxy.new(target, description.TargetName)
end

function UniversalTargetProxyFactory:dtor()
end

return UniversalTargetProxyFactory
