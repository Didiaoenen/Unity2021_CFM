local ValueTargetProxyBase = require("LuaFramework.Binding.Proxy.Targets.ValueTargetProxyBase")

local PropertyTargetProxy = class("PropertyTargetProxy", ValueTargetProxyBase)

PropertyTargetProxy.__getter.DefaultMode = function (this, k)
    return BindingMode.TwoWay
end

function PropertyTargetProxy:ctor(target, propertyInfo)
    self.super:ctor(target)
    self.propertyInfo = propertyInfo
end

function PropertyTargetProxy:DoSubscribeForValueChange(target)
    target.PropertyChanged = {this = self, callback = self.OnPropertyChanged}
end

function PropertyTargetProxy:DoUnsubscribeForValueChange(target)
    target.PropertyChanged = {this = self}
end

function PropertyTargetProxy:OnPropertyChanged(sender, e)
    local name = e.PropertyName
    if not name or name == "" then
        local target = self.target
        if not target then
            return
        end

        self:RaiseValueChanged()
    end
end

function PropertyTargetProxy:GetValue()
    local target = self.target
    if not target then
        return
    end

    local proxyInfo = UnityProxyRegister:Get(self.propertyInfo)
    if proxyInfo then
        return proxyInfo.getter(target)
    else
        return self.target[self.propertyInfo]
    end
end

function PropertyTargetProxy:SetValue(value)
    local target = self.target
    if not target then
        return
    end

    local proxyInfo = UnityProxyRegister:Get(self.propertyInfo)
    if proxyInfo then
        proxyInfo.setter(target, value)
    else
        self.target[self.propertyInfo] = value
    end
end

return PropertyTargetProxy