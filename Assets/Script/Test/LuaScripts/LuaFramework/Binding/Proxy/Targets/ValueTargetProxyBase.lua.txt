local TargetProxyBase = require("LuaFramework.Binding.Proxy.Targets.TargetProxyBase")

local ValueTargetProxyBase = class("ValueTargetProxyBase", TargetProxyBase)

function ValueTargetProxyBase.set:ValueChanged(value)
    setcallback(self.valueChanged, value, function ()
        if self.valueChanged and not self.subScribed then
            self:Subscribe()
        end
    end)
end

local names = {"INotifiable"}

function ValueTargetProxyBase:ctor(target)
    TargetProxyBase.ctor(self, target)
    self.subScribed = false
    self.valueChanged = {}
end

function ValueTargetProxyBase:Subscribe()
    if self.subScribed then
        return
    end

    local target = self.target
    if not target then
        return
    end

    self.subScribed = true
    self:DoSubscribeForValueChange(target)
end

function ValueTargetProxyBase:DoSubscribeForValueChange(target)
    
end

function ValueTargetProxyBase:Unsubscribe()
    if not self.subScribed then
        return
    end

    local target = self.target
    if not target then
        return
    end

    self.subScribed = false
    self:DoUnsubscribeForValueChange(target)
end

function ValueTargetProxyBase:DoUnsubscribeForValueChange(target)
    
end

function ValueTargetProxyBase:RaiseValueChanged()
    table.foreach(self.valueChanged, function (i, v)
        v.callback(v.this)
    end)
end

function ValueTargetProxyBase:GetValue()
    
end

function ValueTargetProxyBase:SetValue(value)
    
end

function ValueTargetProxyBase:ContainsName(name)
    for i, v in ipairs(names) do
        if v == name then
            return true
        end
    end
    return false
end

function ValueTargetProxyBase:dtor()
    
end

return ValueTargetProxyBase