local TargetProxyBase = require("LuaFramework.Binding.Proxy.Targets.TargetProxyBase")
local IObtainable = require("LuaFramework.Binding.Proxy.IObtainable")
local IModifiable = require("LuaFramework.Binding.Proxy.IModifiable")
local INotifiable = require("LuaFramework.Binding.Proxy.INotifiable")
local ListExtention = require("LuaFramework.Common.ListExtention")

local ValueTargetProxyBase = class("ValueTargetProxyBase", TargetProxyBase, IModifiable, IObtainable, INotifiable)

function ValueTargetProxyBase.set:ValueChanged(value)
   setcallback(self.valueChanged, value, function()
      if not self.subScribed then
         self:Subscribe()
      end
   end)
end

function ValueTargetProxyBase:ctor(target)
   TargetProxyBase.ctor(self, target)
   self.subScribed = false
   self.valueChanged = {}
end

function ValueTargetProxyBase:Subscribe()
   if self.subScribed then
      return
   end

   local target = self.target
   if nil == target then
      return
   end

   self.subScribed = true
   self:DoSubscribeForValueChange(target)
end

function ValueTargetProxyBase:DoSubscribeForValueChange(target)
   assert({ target }, "")
end

function ValueTargetProxyBase:Unsubscribe()
   if not self.subScribed then
      return
   end

   local target = self.target
   if nil == target then
      return
   end

   self.subScribed = false
   self:DoUnsubscribeForValueChange(target)
end

function ValueTargetProxyBase:DoUnsubscribeForValueChange(target)
   assert({ target }, "")
end

function ValueTargetProxyBase:RaiseValueChanged()
   ListExtention.Foreach(self.valueChanged, function(_, v)
      v.callback(v.this)
   end)
end

function ValueTargetProxyBase:GetValue()
end

function ValueTargetProxyBase:SetValue(value)
   assert({ value }, "")
end

function ValueTargetProxyBase:dtor()
end

return ValueTargetProxyBase
