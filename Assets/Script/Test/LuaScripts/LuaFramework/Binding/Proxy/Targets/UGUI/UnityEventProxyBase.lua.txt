local EventTargetProxyBase = require("LuaFramework.Binding.Proxy.Targets.Universal.EventTargetProxyBase")

local UnityEventProxyBase = class("UnityEventProxyBase", EventTargetProxyBase)

function UnityEventProxyBase.get:DefaultMode()
    return BindingMode.OneWay
end

function UnityEventProxyBase:ctor(target, unityEvent)
    EventTargetProxyBase.ctor(self, target)

    self.command = nil
    self.invoker = nil
    self.handler = nil
    self.interactable = nil
    self.unityEvent = unityEvent
end

function UnityEventProxyBase:BindEvent()
end

function UnityEventProxyBase:UnbindEvent()
end

function UnityEventProxyBase:IsValidHandler(handler)
end

function  UnityEventProxyBase:IsValidInvoker(invoker)
end

function UnityEventProxyBase:SetValue(value)
    local target = self.target
    if not target then
        return
    end

    if self.command then
        self:UnbindCommand(self.command)
        self.command = nil
    end

    if self.invoker then
        self.invoker = nil
    end

    if self.handler then
        self.handler = nil
    end

    if not value then
        return
    end

    if type(value) == "userdata" then
    
    else
        if type(value) == "table" then
            if value.__name == "ProxyInvoker" then
                self.invoker = value
            elseif value.__name == "SimpleCommand" then
                if not self.interactable then
                    self.interactable = "interactable"
                end

                self.command = value
                self:BindCommand(self.command)
                self:UpdateTargetInteractable()
            end
        end
    end
end

function UnityEventProxyBase:OnCanExecuteChanged(sender, e)
    Executors:RunOnMainThread(function ()
        self:UpdateTargetInteractable()
    end)
end

function UnityEventProxyBase:UpdateTargetInteractable()
    local target = self.target
    if not self.interactable or not target then
        return
    end

    local value = not self.command and false or self.command:CanExecute()
    target[self.interactable] = value
end

function UnityEventProxyBase:BindCommand(command)
    if not command then
        return
    end

    command.CanExecuteChanged = {this = self, callback = self.OnCanExecuteChanged}
end

function UnityEventProxyBase:UnbindCommand(command)
    if not command then
        return
    end

    command.CanExecuteChanged = {this = self}
end

function UnityEventProxyBase:dtor()
end

return UnityEventProxyBase