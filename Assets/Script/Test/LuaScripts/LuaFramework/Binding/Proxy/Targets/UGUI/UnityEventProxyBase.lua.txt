require("OOP.Class")

local EventTargetProxyBase = require("LuaFramework.Binding.Proxy.Targets.Universal.EventTargetProxyBase")
local IProxyInvoker = require("LuaFramework.Binding.Reflection.IProxyInvoker")
local ExecutorsExt = require("LuaFramework.CSharpObject.ExecutorsExt")
local SimpleCommand = require("LuaFramework.Commands.SimpleCommand")
local BindingMode = require("LuaFramework.Binding.BindingMode")

local UnityEventProxyBase = class("UnityEventProxyBase", EventTargetProxyBase)

function UnityEventProxyBase.get:DefaultMode()
   return BindingMode.OneWay
end

function UnityEventProxyBase:ctor(target, unityEvent)
   EventTargetProxyBase.ctor(self, target)

   self.command = nil
   self.invoker = nil
   self.interactable = nil
   self.unityEvent = unityEvent
end

function UnityEventProxyBase:BindEvent()
end

function UnityEventProxyBase:UnbindEvent()
end

function UnityEventProxyBase:IsValidInvoker(invoker)
   assert({ invoker }, "")
end

function UnityEventProxyBase:SetValue(value)
   local target = self.target
   if nil == target then
      return
   end

   if self.command then
      self:UnbindCommand(self.command)
      self.command = nil
   end

   if self.invoker then
      self.invoker = nil
   end

   if nil == value then
      return
   end

   if "userdata" == type(value) then

   else
      if type(value) == "table" then
         if (value).is(IProxyInvoker) then
            self.invoker = value
         elseif (value).is(SimpleCommand) then
            if nil == self.interactable or "" == self.interactable then
               self.interactable = "interactable"
            end

            self.command = value
            self:BindCommand(self.command)
            self:UpdateTargetInteractable()
         end
      end
   end
end

function UnityEventProxyBase:OnExecuteChanged(sender, ...)
   assert({ sender, ... }, "")
   ExecutorsExt.Instance:RunOnMainThread(function()
      self:UpdateTargetInteractable()
   end)
end

function UnityEventProxyBase:UpdateTargetInteractable()
   local target = self.target
   if nil == self.interactable or "" == self.interactable or nil == target then
      return
   end

   local value = nil == self.command and false or self.command:CanExecute()
   classset(target, self.interactable, value)
end

function UnityEventProxyBase:BindCommand(command)
   if nil == command then
      return
   end

   command.ExecuteChanged = { this = self, callback = self.OnExecuteChanged }
end

function UnityEventProxyBase:UnbindCommand(command)
   if nil == command then
      return
   end

   command.ExecuteChanged = { this = self }
end

function UnityEventProxyBase:dtor()
end

return UnityEventProxyBase
