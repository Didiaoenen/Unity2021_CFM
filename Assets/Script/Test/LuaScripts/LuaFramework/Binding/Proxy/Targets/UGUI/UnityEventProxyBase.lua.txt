local EventTargetProxyBase = require("LuaFramework.Binding.Proxy.Targets.Universal.EventTargetProxyBase")
local ExecutorsExt = require("LuaFramework.Execution.ExecutorsExt")
local BindingMode = require("LuaFramework.Binding.BindingMode")
local ICommand = require("LuaFramework.Commands.ICommand")

local UnityEventProxyBase = class("UnityEventProxyBase", EventTargetProxyBase)

function UnityEventProxyBase.get:DefaultMode()
   return BindingMode.OneWay
end

function UnityEventProxyBase:ctor(target, unityEvent)
   EventTargetProxyBase.ctor(self, target)

   self.command = nil
   self.interactable = nil
   self.unityEvent = unityEvent
end

function UnityEventProxyBase:BindEvent()
end

function UnityEventProxyBase:UnbindEvent()
end

function UnityEventProxyBase:SetValue(value)
   local target = self.target
   if nil == target then
      return
   end

   if self.command then
      self:UnbindCommand(self.command)
      self.command = nil
   end

   if nil == value then
      return
   end

   if "userdata" == type(value) then
      return
   end

   if (value).is(ICommand) then
      if nil == self.interactable or "" == self.interactable then
         self.interactable = "interactable"
      end

      self.command = value
      self:BindCommand(self.command)
      self:UpdateTargetInteractable()
   end
end

function UnityEventProxyBase:OnExecuteChanged(sender, ...)
   assert({ sender, ... }, "")
   ExecutorsExt.Instance:RunOnMainThread(function()
      self:UpdateTargetInteractable()
   end)
end

function UnityEventProxyBase:UpdateTargetInteractable()
   local target = self.target
   if nil == self.interactable or "" == self.interactable or nil == target then
      return
   end

   local value = nil == self.command and false or self.command:CanExecute()
   classset(target, self.interactable, value)
end

function UnityEventProxyBase:BindCommand(command)
   if nil == command then
      return
   end

   command.CanExecuteChanged = { this = self, callback = self.OnExecuteChanged }
end

function UnityEventProxyBase:UnbindCommand(command)
   if nil == command then
      return
   end

   command.CanExecuteChanged = { this = self }
end

function UnityEventProxyBase:dtor()
end

return UnityEventProxyBase
