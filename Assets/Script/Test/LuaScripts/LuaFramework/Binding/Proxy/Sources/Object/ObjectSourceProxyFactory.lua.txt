local TypedSourceProxyFactory = require("LuaFramework/Binding/Proxy/Sources/TypedSourceProxyFactory")
local ChainedObjectSourceProxy = require("LuaFramework/Binding/Proxy/Sources/Object/ChainedObjectSourceProxy")

local ObjectSourceProxyFactory = class("ObjectSourceProxyFactory", TypedSourceProxyFactory)

function ObjectSourceProxyFactory:ctor()
    self.factories = {}        
end

function ObjectSourceProxyFactory:TryCreateProxy(source, description, proxy)
    local path = description.Path
    if #path <= 0 then
        error("")
        return
    end

    if #path == 1 then
        proxy.ref = self:Create(source, path)
        if proxy.ref then
            return true
        end
        return false
    end

    proxy.ref = ChainedObjectSourceProxy(source, path, self)
    return true
end

function ObjectSourceProxyFactory:Create(source, path)
    local proxy = {}
    for i, v in ipairs(self.factories) do
        local factory = v.factory
        if factory then
            proxy.ref = factory:Create(source, path)
            if proxy.ref then
                return proxy.ref
            end
        end
    end
    return proxy.ref
end

function ObjectSourceProxyFactory:Register(factory, priority)
    if not factory then
        return        
    end

    table.insert(self.factories, {factory = factory, priority = priority or 100})
    table.sort(self.factories, function (a, b)
        return a.priority > b.priority
    end)
end

function ObjectSourceProxyFactory:Unregister(factory)
    if not factory then
        return
    end

    for i, v in ipairs(self.factories) do
        if v.factory == factory then
            table.remove(self.factories, i)
            return
        end
    end
end

return ObjectSourceProxyFactory