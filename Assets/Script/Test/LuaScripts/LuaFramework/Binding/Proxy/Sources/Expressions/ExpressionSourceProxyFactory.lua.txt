local TypedSourceProxyFactory = require("LuaFramework.Binding.Proxy.Sources.TypedSourceProxyFactory")
local ObjectSourceDescription = require("LuaFramework.Binding.Proxy.Sources.Object.ObjectSourceDescription")
local ExpressionSourceProxy = require("LuaFramework.Binding.Proxy.Sources.Expressions.ExpressionSourceProxy")

local ExpressionSourceProxyFactory = class("ExpressionSourceProxyFactory", TypedSourceProxyFactory)

function ExpressionSourceProxyFactory:ctor(factory)
    self.factory = factory
end

function ExpressionSourceProxyFactory:TryCreateProxy(source, description, proxy)
    proxy = nil
    local expression = description.Expression
    local list = {}
    local paths = PathFinder.FindPaths(expression)
    for i, path in ipairs(paths) do
        if not path.IsStatic then
        end

        local innerProxy = self.factory:CreateProxy(source, ObjectSourceDescription.new(path))
        if innerProxy then
            table.insert(list, innerProxy)
        end
    end

    local del = expression:Compile()
    local returnType = del:ReturnType()
    local parameterType = del:ParameterType()
    if parameterType then
        proxy = ExpressionSourceProxy.new(source, del, list)
    else
        proxy = ExpressionSourceProxy.new(del, list)
    end

    if proxy then
        return true
    end

    return false
end

function ExpressionSourceProxyFactory:ctor()

end

return ExpressionSourceProxyFactory