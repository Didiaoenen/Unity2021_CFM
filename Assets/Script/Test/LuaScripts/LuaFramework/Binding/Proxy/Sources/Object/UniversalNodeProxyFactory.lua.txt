local INodeProxyFactory = require("LuaFramework.Binding.Proxy.Sources.Object.INodeProxyFactory")
local MethodNodeProxy = require("LuaFramework.Binding.Proxy.Sources.Object.MethodNodeProxy")
local FieldOrPropertyNodeProxy = require("LuaFramework.Binding.Proxy.Sources.Object.FieldOrPropertyNodeProxy")
local InteractionNodeProxy = require("LuaFramework.Binding.Proxy.Sources.Object.InteractionNodeProxy")
local IInteractionRequest = require("LuaFramework.Interactivity.IInteractionRequest")

local UniversalNodeProxyFactory = class("UniversalNodeProxyFactory", INodeProxyFactory)

function UniversalNodeProxyFactory:ctor()

end

function UniversalNodeProxyFactory:Create(source, token)
   local node = token.Current
   if nil == source then
      return
   end

   return self:CreateProxy(source, node)
end

function UniversalNodeProxyFactory:CreateProxy(source, node)
   local memberInfo = classget(source, node)

   if "userdata" == type(memberInfo) then
      return FieldOrPropertyNodeProxy.new(source, node)
   end

   if "function" == type(memberInfo) then
      return MethodNodeProxy.new(source, node)
   end

   if "table" == type(memberInfo) then
      if (memberInfo).is(IInteractionRequest) then
         return InteractionNodeProxy.new(source, node)
      end
   end

   return FieldOrPropertyNodeProxy.new(source, node)
end

function UniversalNodeProxyFactory:dtor()
end

return UniversalNodeProxyFactory
