local INodeProxyFactory = require("LuaFramework.Binding.Proxy.Sources.Object.INodeProxyFactory")
local MethodNodeProxy = require("LuaFramework.Binding.Proxy.Sources.Object.MethodNodeProxy")
local PropertyNodeProxy = require("LuaFramework.Binding.Proxy.Sources.Object.PropertyNodeProxy")
local InteractionNodeProxy = require("LuaFramework.Binding.Proxy.Sources.Object.InteractionNodeProxy")
local IInteractionRequest = require("LuaFramework.Interactivity.IInteractionRequest")
local IObservableProperty = require("LuaFramework.Observables.IObservableProperty")

local UniversalNodeProxyFactory = class("UniversalNodeProxyFactory", INodeProxyFactory)

function UniversalNodeProxyFactory:ctor()

end

function UniversalNodeProxyFactory:Create(source, token)
   local node = token.Current
   if nil == source then
      return
   end

   return self:CreateProxy(source, node)
end

function UniversalNodeProxyFactory:CreateProxy(source, node)
   local memberInfo = classget(source, node)

   if "function" == type(memberInfo) then
      return MethodNodeProxy.new(source, node)
   elseif "userdata" == type(memberInfo) then
      return PropertyNodeProxy.new(source, node)
   else
      if "table" == type(memberInfo) then
         if (memberInfo).is(IObservableProperty) then

         elseif (memberInfo).is(IInteractionRequest) then
            return InteractionNodeProxy.new(source, node)
         end
      end

      return PropertyNodeProxy.new(source, node)
   end
end

function UniversalNodeProxyFactory:dtor()
end

return UniversalNodeProxyFactory
