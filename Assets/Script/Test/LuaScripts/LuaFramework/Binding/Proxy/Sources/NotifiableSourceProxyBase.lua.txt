local SourceProxyBase = require("LuaFramework.Binding.Proxy.Sources.SourceProxyBase")

local NotifiableSourceProxyBase = class("NotifiableSourceProxyBase", SourceProxyBase)

NotifiableSourceProxyBase.__setter.ValueChanged = function (this, k, v)
    if v and v.callback ~= nil then
        table.insert(this.valueChanged, v)
    else
        for i, value in ipairs(this.valueChanged) do
            if v.this == value.this then
                table.remove(this.valueChanged, i)
                break
            end
        end
    end
end

local names = {"INotifiable"}

function NotifiableSourceProxyBase:ctor(source)
    self.super:ctor(source)
    self.valueChanged = {}
end

function NotifiableSourceProxyBase:RaiseValueChanged()
    try
    {
        function ()
            for i, v in ipairs(self.valueChanged) do
                v.callback(v.this)
            end
        end,
        catch = function ()
            
        end
    }
end

function NotifiableSourceProxyBase:ContainsName(name)
    for i, v in ipairs(names) do
        if v == name then
            return true
        end
    end
    return false
end

return NotifiableSourceProxyBase