local ChainedObjectSourceProxy = class("ChainedObjectSourceProxy")

function ChainedObjectSourceProxy:ctor(source, path, factory)
    self.factory = factory
    self.count = path.Count
    self.proxies = {}
    self:Bind(source, path)
end

function ChainedObjectSourceProxy:Bind(source, path)
    assert(path, "")
    local index = path.Index
    local proxy = self.factory:Create(source, path)

    local entry = ProxyEntry(proxy, path)
    self.proxies[index] = entry
    if path:HasNext() then
        if proxy.__name == "INotifiable" then
            entry.Handler = function (sender, args)
                local proxyEntry = self.proxies[index]
                if not proxyEntry or sender ~= proxyEntry.Proxy then
                    return
                end

                self:Rebind(index)
            end
        end

        local child = proxy:GetValue()
        if child then
            self:Bind(child, path:Next())
        else
            self:RaiseValueChanged()
        end
    else
        if proxy.__name == "INotifiable" then
            entry.Handler = function (sender, args)
                self:RaiseValueChanged()
            end
        end
    end
end

function ChainedObjectSourceProxy:Rebind(index)
    
end

function ChainedObjectSourceProxy:Unbind()
    
end

function ChainedObjectSourceProxy:dtor()
    
end

return ChainedObjectSourceProxy