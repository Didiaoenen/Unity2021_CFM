local ChainedObjectSourceProxy = class("ChainedObjectSourceProxy")

function ChainedObjectSourceProxy:ctor(source, path, factory)
    self.factory = factory
    self.count = path.Count
    self.proxies = {}
    self:Bind(source, path)
end

function ChainedObjectSourceProxy:Bind(source, path)
    local index = path.Index
    local proxy = self.factory:Create(source, path)
    if not path then
        error("")
        return
    end

    local entry = ProxyEntry(proxy, path)
    self.proxies[index] = entry
    if path:HasNext() then
        if proxy:GetName() == "INotifiable" then
            entry.Handler = function (sender, args)
                try
                {
                    function ()
                        local proxyEntry = self.proxies[index]
                        if not proxyEntry or sender ~= proxyEntry.Proxy then
                            return
                        end

                        self:Rebind(index)
                    end,
                    catch = function ()
                        
                    end
                }
            end
        end

        local child = proxy:GetValue()
        if child then
            self:Bind(child, path:Next())
        else
            self:RaiseValueChanged()
        end
    else
        if proxy:GetName() == "INotifiable" then
            entry.Handler = function (sender, args)
                self:RaiseValueChanged()
            end
        end
    end
end

function ChainedObjectSourceProxy:Rebind(index)
    
end

function ChainedObjectSourceProxy:Unbind()
    
end

function ChainedObjectSourceProxy:Dispose()
    
end

return ChainedObjectSourceProxy