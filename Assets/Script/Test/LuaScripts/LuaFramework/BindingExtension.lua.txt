local BindingSet = require("LuaFramework/BindingSet")
local BindingContext = require("LuaFramework/BindingContext")

local BindingExtension = class("BindingExtension")

BindingExtension.__getter.Binder = function (this, k)
    return this.binder
end

BindingExtension.__setter.Binder = function (this, k, v)
    this.binder = v
end

BindingExtension.__getter.BindingContext = function (this, k)
    if not this.bindingContext then
        this.bindingContext = BindingContext(this.behaviour, this.Binder)
    end
    return this.bindingContext
end

function BindingExtension:ctor(behaviour)
    self.binder = nil
    self.bindingContext = nil
    self.behaviour = behaviour
end

function BindingExtension:CreateBindingSet()
    local context = self.BindingContext
    return BindingSet(context, self.behaviour)
end

function BindingExtension:CreateBindingSetWithContext(dataContext)
    local context = self.BindingContext
    context.DataContext = dataContext
    return BindingSet(context, self.behaviour)
end

function BindingExtension:SetDataContext(dataContext)
    self.BindingContext.DataContext = dataContext
end

function BindingExtension:GetDataContext()
    return self.BindingContext.DataContext
end

return BindingExtension