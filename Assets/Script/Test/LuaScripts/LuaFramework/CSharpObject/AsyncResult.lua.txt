local AsyncResult = class("AsyncResult")

function AsyncResult.get:IsDone()
    return self.csharp.done
end

function AsyncResult.get:Result()
    return self.csharp.result
end

function AsyncResult.get:IsCancellationRequested()
    return self.csharp.cancellationRequested
end

function AsyncResult.get:IsCancelled()
    return self.csharp.cancelled
end

function AsyncResult:ctor(cancelable)
    self.csharp = CS.CSObject.Asynchronous.AsyncResult(cancelable or false)
end

function AsyncResult:SetException(errorMsg)
    error(errorMsg)
end

function AsyncResult:SetResult(result)
    self.csharp:SetResult(result)
end

function AsyncResult:SetCancelled()
    self.csharp:SetCancelled()
end

function AsyncResult:Cancel()
    return self.csharp:Cancel()
end

function AsyncResult:Callbackable()
    return self.csharp:Callbackable()
end

function AsyncResult:Synchronized()
    return self.csharp:Synchronized()
end

function AsyncResult:WaitForDone()
    return self.csharp:WaitForDone()
end

function AsyncResult:dtor()
    
end

return AsyncResult